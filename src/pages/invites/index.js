import Head from "next/head"
import layoutStyles from "@/styles/usersLayout.module.css"
import Header from "@/components/Header"
import Footer from "@/components/Footer"

import prisma from "@/lib/prisma/prisma"
import { getServerSession } from "@/lib/sessions"

import "bootstrap/dist/css/bootstrap.min.css"

export default function MyInvites(props) {
  console.log(props)

  return (
    <>
      <Head>
        <title>My Invites</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${layoutStyles.main} ${layoutStyles.mainContent}`}>
        <Header />
        <div className={layoutStyles.labelsContainer}>
          <table className="table">
            <thead>
              <tr>
                <th scope="col">#</th>
                <th scope="col">Organization</th>
                <th scope="col">Invited By</th>
                <th scope="col">Invited At</th>
                <th scope="col">Role</th>
              </tr>
            </thead>
            <tbody>
              {props.organizationInvites.map((invite, index) => (
                <tr key={index}>
                  <th scope="row">{index}</th>
                  <td><a href={`/${invite.organization.name}`}>{invite.organization.name}</a></td>
                  <td><a href={`/${invite.inviteeUser.name}`}>{invite.inviteeUser.name}</a></td>
                  <td>{invite.createdAt}</td>
                  <td>{invite.role}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        <Footer />
      </main>
    </>
  )
}

export async function getServerSideProps(context) {
  const session = await getServerSession(context.req, context.res)
  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false
      }
    }
  }

  const organizationInvites = await prisma.organizationInvitation.findMany({
    where: {
      invitedId: session.user.id
    },

    select: {
      id: true,
      role: true,
      createdAt: true,
      inviteeUser: {
        select: {
          name: true
        }
      },
      organization: {
        select: {
          name: true
        }
      }
    }
  })

  console.log(organizationInvites)

  const mapped = organizationInvites.map((e) => {
    return {
      ...e,
      createdAt: e.createdAt.toISOString()
    }
  })

  return {
    props: {
      organizationInvites: mapped
    }
  }
}
