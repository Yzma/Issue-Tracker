import Head from "next/head";

import layoutStyles from "@/styles/usersLayout.module.css";
import Header from "@/components/Header";
import ProfileContainer from '@/components/ProfileContainer';
import ProjectSection from '@/components/ProjectSection';

import prisma from "@/lib/prisma/prisma";

export default function UserProfile() {
  //fake data for now
  const username = "Julian Paredes";
  const bio = "Full stack developer student at Lighthouse Labs";
  const projects = [
    { id: 1, name: "Tweeter-App", description: "Twitter clone app", updated_at: "March 17 2023" },
    { id: 2, name: "Scheduler-App", description: "Scheduler Appointment App", updated_at: "March 17 2023" },
  ];

  return (
    <>
      <Head>
        <title>User profile</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${layoutStyles.main} ${layoutStyles.mainContent}`}>
        <Header />
        <div className={layoutStyles.profileContainer}>
          <ProfileContainer username={username} bio={bio} />
        </div>
        <div className={layoutStyles.projectSection}>
        <ProjectSection projects={projects} />
        </div>
      </main>
    </>
  );
}

// TODO: Determine if it's a user or org and render accordantly
export async function getServerSideProps(context) {
  const { namespaceName } = context.query

  const namespace = await prisma.namespace.findUnique({
    where: {
      name: namespaceName
    },

    include: {
      projects: true
    }
  })

  if (!namespace) {
    return {
      redirect: {
        destination: "/404",
        permanent: false
      }
    }
  }

  let result

  if (namespace.userId) {
    result = await prisma.user.findUnique({
      where: {
        username: namespaceName
      }
    })
  } else {
    result = await prisma.organization.findUnique({
      where: {
        name: namespaceName
      }
    })
  }

  console.log("namespace", namespace)
  console.log("res", result)

  const mappedNamespace = {
    ...namespace,
    projects: namespace.projects.map((project) => ({
      ...project,
      createdAt: project.createdAt.toISOString(),
      updatedAt: project.updatedAt.toISOString()
    }))
  }

  const mappedEntity = {
    ...result,
    createdAt: result.createdAt.toISOString(),
    updatedAt: result.updatedAt.toISOString()
  }

  return {
    props: {
      type: namespace.userId ? "User" : "Organization",
      namespace: mappedNamespace,
      data: mappedEntity
    }
  }
}
