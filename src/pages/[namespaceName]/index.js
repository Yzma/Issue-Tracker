import Head from "next/head";

import layoutStyles from "@/styles/usersLayout.module.css";
import Header from "@/components/Header";
import ProfileContainer from '@/components/ProfileContainer';
import ProjectSection from '@/components/ProjectSection';
import Footer from "@/components/Footer";
import prisma from "@/lib/prisma/prisma";
import { useSession } from "next-auth/react";
import { getServerSession } from "@/lib/sessions"

export default function UserProfile({ user }) {
  const { data: session } = useSession();
  const userId = session?.user?.id;

  const username = user.name;
  const projects = user.namespace.projects;

  return (
    <>
      <Head>
        <title>User profile</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${layoutStyles.main} ${layoutStyles.mainContent}`}>
        <Header />
        <div className={layoutStyles.profileContainer}>
          <ProfileContainer username={username} bio={"random"} />
        </div>
        <div className={layoutStyles.projectSection}>
          <ProjectSection projects={projects} />
        </div>
        <Footer />
      </main>
    </>
  );
}

export async function getServerSideProps(context) {
  const session = await getServerSession(context.req, context.res);
  if (!session) {
    return {
      redirect: {
        destination: "/api/auth/signin",
        permanent: false,
      },
    };
  }

  // const userWithId = await prisma.user.findFirst({
  //   where: {
  //     id: session.user.id,
  //   },
  //   select: {
  //     id: true,
  //   },
  // });

  const user = await prisma.user.findUnique({
    where: {
      id: session.user.id,
    },
    include: {
      namespace: {
        include: {
          projects: true,
        },
      },
    },
  });

  return {
    props: {
      user: JSON.parse(JSON.stringify(user)),
    },
  };
}

// // TODO: Determine if it's a user or org and render accordantly
// export async function getServerSideProps(context) {
//   const { namespaceName } = context.query

//   const namespace = await prisma.namespace.findUnique({
//     where: {
//       name: namespaceName
//     },

//     include: {
//       projects: true
//     }
//   })

//   if (!namespace) {
//     return {
//       redirect: {
//         destination: "/404",
//         permanent: false
//       }
//     }
//   }

//   let result

//   if (namespace.userId) {
//     result = await prisma.user.findUnique({
//       where: {
//         username: namespaceName
//       }
//     })
//   } else {
//     result = await prisma.organization.findUnique({
//       where: {
//         name: namespaceName
//       }
//     })
//   }

//   console.log("namespace", namespace)
//   console.log("res", result)

//   const mappedNamespace = {
//     ...namespace,
//     projects: namespace.projects.map((project) => ({
//       ...project,
//       createdAt: project.createdAt.toISOString(),
//       updatedAt: project.updatedAt.toISOString()
//     }))
//   }

//   const mappedEntity = {
//     ...result,
//     createdAt: result.createdAt.toISOString(),
//     updatedAt: result.updatedAt.toISOString()
//   }

//   return {
//     props: {
//       type: namespace.userId ? "User" : "Organization",
//       namespace: mappedNamespace,
//       data: mappedEntity
//     }
//   }
// }

// export async function getServerSideProps(context) {
//   const { namespaceName } = context.query

//   const namespace = await prisma.namespace.findUnique({
//     where: {
//       name: namespaceName
//     },

//     include: {
//       projects: true
//     }
//   })

//   if (!namespace) {
//     return {
//       redirect: {
//         destination: "/404",
//         permanent: false
//       }
//     }
//   }

//   let result

//   if (namespace.userId) {
//     result = await prisma.user.findUnique({
//       where: {
//         username: namespaceName
//       }
//     })
//   } else {
//     result = await prisma.organization.findUnique({
//       where: {
//         name: namespaceName
//       }
//     })
//   }

//   console.log("namespace", namespace)
//   console.log("res", result)

//   const mappedNamespace = {
//     ...namespace,
//     projects: namespace.projects.map((project) => ({
//       ...project,
//       createdAt: project.createdAt.toISOString(),
//       updatedAt: project.updatedAt.toISOString()
//     }))
//   }

//   const mappedEntity = {
//     ...result,
//     createdAt: result.createdAt.toISOString(),
//     updatedAt: result.updatedAt.toISOString()
//   }

//   return {
//     props: {
//       type: namespace.userId ? "User" : "Organization",
//       namespace: mappedNamespace,
//       data: mappedEntity
//     }
//   }
// }
