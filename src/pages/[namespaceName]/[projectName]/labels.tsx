import { useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";

import Header from "@/components/Header";
import LabelList from "@/components/LabelList";
import LabelSearchBar from "@/components/LabelSearchBar";
import ProjectBelowNavbar from "@/components/navbar/ProjectBelowNavbar";

import prisma from "@/lib/prisma/prisma";

import { GetServerSideProps, InferGetServerSidePropsType } from "next";

// TODO: Create one type and emit it from /new page
type LabelProps = {
  id: string
  name: string
  description: string
  color: string
}

export default function LabelPage({ data }: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const router = useRouter();
  const { namespaceName, projectName } = router.query;

  const [searchTerm, setSearchTerm] = useState("");

  const handleSearch = (searchTerm: string) => {
    setSearchTerm(searchTerm);
  };

  const filteredLabels = data.filter((label) =>
    label.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <>
      <Head>
        <title>Label Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex h-screen overflow-hidden">
        <div className="relative flex flex-col flex-1 overflow-y-auto overflow-x-hidden">
          <main>
            <Header />
            <ProjectBelowNavbar
              namespaceName={namespaceName}
              projectName={projectName}
              selected={"labels"}
            />
            <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-9xl mx-auto">
              <header className="px-5 py-4">
                <h2 className="font-bold text-slate-800">Labels</h2>
              </header>
              <div>
                <LabelSearchBar onSearch={handleSearch} />

                <LabelList labels={filteredLabels} />
              </div>
            </div>
          </main>
        </div>
      </div>
    </>
  )
}

export const getServerSideProps: GetServerSideProps<{ data: LabelProps[] }> = async (context) => {
  const { namespaceName, projectName } = context.query;
  const labelData = await prisma.label.findMany({
    where: {
      project: {
        // @ts-ignore
        name: projectName,
        namespace: {
          // @ts-ignore
          name: namespaceName,
        }
      }
    }
  })

  return {
    props: {
      data: labelData
    }
  }
}
