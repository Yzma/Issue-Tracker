import { useState } from "react"
import Head from "next/head"
import { useRouter } from "next/router"

import { Formik, Form, Field } from "formik"
import { IssueCreationSchema } from "@/lib/yup-schemas"

import Header from "@/components/Header"
import ProjectBelowNavbar from "@/components/navbar/ProjectBelowNavbar"

import { useSession } from "next-auth/react"
import prisma from "@/lib/prisma/prisma"

import { GetServerSideProps, InferGetServerSidePropsType } from "next"
import axios from "axios"

type Project = {
  id: string
  name: string
  private: boolean
}

export default function IssuesCreate({ data }: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const router = useRouter()
  const { namespaceName, projectName } = router.query
  const [project, setProject] = useState<Project>(data)

  const { data: session } = useSession()

  return (
    <>
      <Head>
        <title>Project Settings</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex h-screen bg-slate-100 overflow-hidden">
        <div className="relative flex flex-col flex-1 overflow-y-auto overflow-x-hidden">
          <Header />
          <ProjectBelowNavbar
            namespaceName={namespaceName}
            projectName={project.name}
            selected={"settings"}
          />
          <main>
            <Formik
              initialValues={{
                name: project.name
              }}
              // validationSchema={IssueCreationSchema}
              validateOnChange={false}
              validateOnBlur={false}
              onSubmit={(values, { setSubmitting, setFieldError }) => {
                axios
                  .put(`/api/${namespaceName}/${projectName}/`, {
                    name: values.name
                  })
                  .then((response) => {
                    console.log("RESPONSE:", response)
                    console.log("id: ", response.data.result.id)
                    setProject((prevState) => ({
                      ...prevState,
                      name: values.name
                    }))
                  })
                  .catch((error) => {
                    console.log("ERROR:", error.response.data)
                    console.log("ERROR:", error)
                  })
                  .finally(() => {
                    setSubmitting(false)
                  })
              }}
            >
              {({
                values,
                errors,
                isSubmitting,
                setFieldValue,
                setFieldError
              }) => (
                <Form
                  onChange={() => {
                    setFieldError("name", undefined)
                    setFieldError("description", undefined)
                  }}
                >
                  <div className="grow">

                    <div className="p-6 space-y-6">
                      <h2 className="text-2xl text-slate-800 font-bold mb-5">Project Settings</h2>

                      <section>
                        <div className="sm:flex sm:items-center space-y-4 sm:space-y-0 sm:space-x-4 mt-5">
                          <div className="sm:w-1/3">
                            <label className="block text-sm font-medium mb-1" htmlFor="name">Project Name</label>
                            <Field name="name">
                              {({
                                field,
                                meta
                              }) => (
                                <div>
                                  <input className="form-input w-full" type="text" placeholder={data.name} {...field} />
                                  {meta.touched && meta.error && (
                                    <div className="error">{meta.error}</div>
                                  )}
                                </div>
                              )}
                            </Field>
                          </div>
                          <div className="sm:w-1/3">
                            <button className="btn-xs h-8 shrink bg-gray-500 hover:bg-gray-600 text-white">Rename</button>
                          </div>
                        </div>
                      </section>

                      <section>
                        <h3 className="text-xl leading-snug text-slate-800 font-bold mb-4">Danger Zone</h3>
                        <div className="border border-red-400">
                          <ul>
                            <li className="flex justify-between items-center py-3 border-b border-slate-200 px-2">
                              {/* Left */}
                              <div>
                                <div className="text-slate-800 font-semibold">Change project visibility</div>
                                <div className="text-sm">This project is currently {project.private ? <>private</> : <>public</>}</div>
                              </div>
                              {/* Right */}
                              <div className="flex items-center ml-4">
                                <button className="btn-sm h-8 shrink bg-gray-500 hover:bg-gray-600 text-white">Change Visibility</button>
                              </div>
                            </li>
                            <li className="flex justify-between items-center py-3 border-b border-slate-200 px-2">
                              {/* Left */}
                              <div>
                                <div className="text-slate-800 font-semibold">Transfer Ownership</div>
                                <div className="text-sm">Transfer this project to another user or to an organization where you have the ability to create projects.</div>
                              </div>
                              {/* Right */}
                              <div className="flex items-center ml-4">
                                <button className="btn-sm h-8 shrink bg-gray-500 hover:bg-gray-600 text-white" disabled>Transfer (Coming Soon)</button>
                              </div>
                            </li>
                            <li className="flex justify-between items-center py-3 border-b border-slate-200 px-2">
                              {/* Left */}
                              <div>
                                <div className="text-slate-800 font-semibold">Delete this Project</div>
                                <div className="text-sm">Once you delete a project, there is no going back. Please be certain.</div>
                              </div>
                              {/* Right */}
                              <div className="flex items-center ml-4">
                                <button className="btn-sm h-8 shrink bg-gray-500 hover:bg-gray-600 text-white">Delete this Project</button>
                              </div>
                            </li>
                          </ul>
                        </div>
                      </section>
                    </div>
                  </div>
                </Form>
              )}
            </Formik>
          </main>
        </div>
      </div>
    </>
  )
}


export const getServerSideProps: GetServerSideProps<{ data: Project }> = async (context) => {
  const { namespaceName, projectName } = context.query

  const project = await prisma.project.findFirst({
    where: {
      // @ts-ignore
      name: projectName,
      namespace: {
        // @ts-ignore
        name: namespaceName
      }
    },

    select: {
      id: true,
      name: true,
      private: true,
    }
  })

  if(!project) {
    return {
      redirect: {
        destination: "/404",
        permanent: false
      }
    }
  }

  return {
    props: {
      data: project
    }
  }
}
