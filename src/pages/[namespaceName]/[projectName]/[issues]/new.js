import Head from "next/head"
import { useRouter } from 'next/router'

import ReactMarkdown from "react-markdown"
import remarkGfm from "remark-gfm"

import { Formik, Form, Field } from "formik"
import { IssueCreationSchema } from "@/lib/yup-schemas"

import axios from "axios"

import "bootstrap/dist/css/bootstrap.min.css"

export default function IssuesCreate() {


  const router = useRouter()
  const { namespaceName, projectName } = router.query
  console.log(namespaceName, projectName)

  // TODO: This will have to be moved into a different path, change this later
  // const namespaceName = "Alice"
  // const projectName = "AliceProject"

  return (
    <>
      <Head>
        <title>Create Issues</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="mt-5" />

      <div className="container">
        <div className="d-flex justify-content-between">
          <h2>Create new Issue</h2>
        </div>

        <hr />
      </div>

      <main className="container">
        <div className="row g-5">
          <div className="col-md-8">
            <article>
              <Formik
                initialValues={{
                  name: "",
                  description: ""
                }}
                validationSchema={IssueCreationSchema}
                onSubmit={(values, { setSubmitting, setFieldError }) => {
         
                  axios
                    .post(`/api/${namespaceName}/${projectName}/issues`, {
                      name: values.name,
                      description: values.description
                    })
                    .then((response) => {
                      console.log("RESPONSE:", response)
                      // TODO: Redirect to new project page
                      // router.push("/")
                    })
                    .catch((error) => {
                      console.log("ERROR:", error.response.data)
                      console.log("ERROR:", error)
                    })
                    .finally(() => {
                      setSubmitting(false)
                    })
                }}
              >
                {({
                  values,
                  errors,
                  touched,
                  handleChange,
                  handleBlur,
                  handleSubmit,
                  isSubmitting
                  /* and other goodies */
                }) => (
                  <Form>
                    {(errors.name || errors.description || errors.private) && (
                      <div className="alert alert-danger" role="alert">
                        <ul>
                          {errors.name && <li>Name: {errors.name}</li>}
                          {errors.description && (
                            <li>Description: {errors.description}</li>
                          )}
                          {errors.private && <li>private: {errors.private}</li>}
                        </ul>
                      </div>
                    )}

                    <label htmlFor="owner" className="form-label">
                      Title
                    </label>
                    <Field
                      className="form-control"
                      type="text"
                      name="name"
                    />

                    <div className="mb-3">
                      <label htmlFor="description" className="form-label">
                        Description (optional)
                      </label>
                      <Field
                        className="form-control"
                        type="textfield"
                        name="description"
                      />
                    </div>

                    {errors.name && <div>Name errors:{errors.name}</div>}
                    {errors.description && (
                      <div>Description errors: {errors.description}</div>
                    )}
                    {errors.private && (
                      <div>Private error: {errors.private}</div>
                    )}

                    <hr />

                    <button
                      type="submit"
                      className="btn btn-success"
                      disabled={isSubmitting}
                    >
                      Create Issue
                    </button>
                  </Form>
                )}
              </Formik>
            </article>
          </div>

          <div className="col-md-4">
            <div>
              <span className="text-secondary h5">Asignees</span>
              <br />
              <a>Yzma</a>
            </div>

            <hr />

            <div>
              <span className="text-secondary h5">Labels</span>
              <br />
              <span className="badge bg-primary">Label 1</span>{" "}
              <span className="badge bg-warning">Label 2</span>
            </div>

            <hr />

            <div>
              <span className="text-secondary h5">Participants</span>
              <br />
              <a>Yzma</a>
            </div>

            <hr />

          </div>
        </div>
      </main>
    </>
  )
}
