// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserSettings {
  id String @id @default(cuid())

  colorScheme ColorScheme @default(Light)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  username String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  namespace Namespace?
  settings  UserSettings?
}

model Organization {
  id String @id @default(cuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  namespace Namespace?
}

model Namespace {
  id   String @id @default(cuid())
  name String @unique @default(cuid())

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String?       @unique
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  projects Project[]
}

model Project {
  id          String  @id @default(cuid())
  name        String  @default(cuid())
  description String  @default(cuid())
  private     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  namespaceId    String
  namespace      Namespace @relation(fields: [namespaceId], references: [id])

  @@unique([namespaceId, name])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ColorScheme {
  Dark
  Light
}
