
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserSettings {
  id String @id @default(cuid())

  colorScheme ColorScheme @default(Light)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  username String? @unique

  bio String?
  linkedIn String?
  twitter String?
  github String?
  publicEmail String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  namespace Namespace?
  settings  UserSettings?

  issues        Issue[]
  comments      Comment[]
  organizations Organization[]

  members                  Member[]

  memberInvitations        MemberInvitation[] @relation("invited")
  pendingMemberInvitations MemberInvitation[] @relation("invites")
}

model Organization {
  id String @id @default(cuid())

  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  namespace Namespace?

  members                  Member[]
  MemberInvitation         MemberInvitation[]
}

// Note: 20230319212545_namespace_has_atleast_one_org_or_user:
// This ensures that 'userId' or 'organizationId' must be set. A row with both fields set or non set cannot exsist in the table.
model Namespace {
  id   String @id @default(cuid())
  name String @unique @default(cuid())

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String?       @unique
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  projects Project[]
}

model MemberInvitation {
  id String @id @default(cuid())

  role      OrganizationRole @default(User)
  createdAt DateTime         @default(now())

  // The user that's being invited
  invitedId   String
  invitedUser User   @relation("invited", fields: [invitedId], references: [id])

  // The user that's inviting another user
  inviteeId   String
  inviteeUser User   @relation("invites", fields: [inviteeId], references: [id])

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  @@unique([invitedId, organizationId])
  @@unique([invitedId, projectId])
}

// TODO: This is likely going to be a major change.
// Essentially we want to merge the OrganizationMember table and transform it into a generic Member table (like below)
// This allows us to have Members for both an Organization and a Project
// This will be a slow merged as we need to go throughout the code and change things.
model Member {
  id String @id @default(cuid())

  role      OrganizationRole
  createdAt DateTime         @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  @@unique([userId, organizationId])
  @@unique([userId, projectId])
}

model Project {
  id          String  @id @default(cuid())
  name        String  @default(cuid())
  description String  @default(cuid()) @db.Text()
  private     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  namespaceId String
  namespace   Namespace @relation(fields: [namespaceId], references: [id])

  members Member[]
  issues  Issue[]
  labels  Label[]

  MemberInvitation MemberInvitation[]

  @@unique([namespaceId, name])
}

model Issue {
  id          String  @id @default(cuid())
  name        String  @default(cuid())
  description String  @default(cuid()) @db.Text()
  open        Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pinned      Boolean @default(false)
  issueNumber Int     @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  comments Comment[]
  labels   Label[]

  @@unique([projectId, issueNumber])
}

model Comment {
  id          String @id @default(cuid())
  description String @default(cuid()) @db.Text()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  issueId String
  issue   Issue  @relation(fields: [issueId], references: [id])
}

model Label {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(255)
  description String? @db.VarChar(255)
  color       String  @db.VarChar(6)

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  issues Issue[]

  @@unique([name, projectId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String?
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, userId])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrganizationRole {
  Owner
  Admin
  Maintainer
  User
}

enum ColorScheme {
  Dark
  Light
}
